// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// compute_fourier_series
NumericMatrix compute_fourier_series(NumericMatrix mat, NumericVector t, int type);
RcppExport SEXP _drewcurves_compute_fourier_series(SEXP matSEXP, SEXP tSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_fourier_series(mat, t, type));
    return rcpp_result_gen;
END_RCPP
}
// minmax
NumericMatrix minmax(const NumericMatrix& mat);
RcppExport SEXP _drewcurves_minmax(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(minmax(mat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_drewcurves_compute_fourier_series", (DL_FUNC) &_drewcurves_compute_fourier_series, 3},
    {"_drewcurves_minmax", (DL_FUNC) &_drewcurves_minmax, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_drewcurves(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
